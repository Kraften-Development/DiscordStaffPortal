// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. npx prisma db push
// 2. npx prisma generate
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id       String @id @default(cuid())
  userId   String
  type     String
  provider String

  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Notifications {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  severity String @default("info")
  message  String @default("Tom besked")
  userId   String
}

//The onDelete('cascade') means that when the row is deleted, it will delete all it's references and attached data too.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ApplicationType {
  HELPER
}

model Application {
  id                 String          @id @default(cuid())
  name               String
  username           String
  age                Int
  description        String
  reason             String
  whychooseyou       String
  screenshare        String
  previousexperience String
  voicechat          String
  availability       Int
  commitment         Boolean
  additionalinfo     String?
  applicationType    ApplicationType
  user               User            @relation(fields: [userId], references: [id])
  userId             String
}

enum Role {
  USER
  HELPER
  MOD
  ADMIN
  GOAT
}

model User {
  id            String          @id @default(cuid())
  name          String?
  rank          Role            @default(USER)
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Notifications Notifications[]
  Application   Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
